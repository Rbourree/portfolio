{"status":"ok","feed":{"url":"https://medium.com/feed/@romain.bourree","title":"Stories by Romain BOURR\u00c9E on Medium","link":"https://medium.com/@romain.bourree?source=rss-1e15ea226876------2","author":"","description":"Stories by Romain BOURR\u00c9E on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/2*1dNZ8tLHNGri4ZwP3Fdr0w.jpeg"},"items":[{"title":"NestJS &amp; Clean Architecture","pubDate":"2025-05-23 12:48:18","link":"https://medium.com/@romain.bourree/nestjs-clean-architecture-f8184c5ae1a3?source=rss-1e15ea226876------2","guid":"https://medium.com/p/f8184c5ae1a3","author":"Romain BOURR\u00c9E","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gSPwd3lFDhp0HSGKkEYZTA.png\"></figure><h3>Introduction</h3>\n<p>Vous venez de relire un contr\u00f4leur de <strong>721 lignes</strong>\u00a0?<br> Vous avez vu un repository injecter un service\u2026 qui r\u00e9-injecte le m\u00eame repository\u00a0?<br>Vous entendez encore la voix du stagiaire expliquer \u00ab\u00a0j\u2019ai mis la logique m\u00e9tier <em>l\u00e0</em> parce que c\u2019\u00e9tait plus simple\u00a0\u00bb\u00a0?</p>\n<p>Bienvenue dans la vraie vie du d\u00e9veloppeur back-end\u200a\u2014\u200al\u00e0 o\u00f9 la dette technique pousse plus vite que les mauvaises herbes dans un potager\u00a0normand.</p>\n<p>En 2012, <strong>Robert C. Martin</strong> (alias <em>Uncle Bob</em>) publie son fameux sch\u00e9ma\u00a0: un c\u0153ur de r\u00e8gles m\u00e9tier intouchable, puis des anneaux concentriques pour l\u2019application, l\u2019infrastructure et enfin l\u2019interface.<br> Le principe\u200a\u2014\u200aappel\u00e9 <strong>Clean Architecture</strong>\u200a\u2014\u200atient en une phrase\u00a0:</p>\n<blockquote><strong>Les d\u00e9pendances doivent toujours pointer vers le centre, jamais l\u2019inverse.</strong></blockquote>\n<p>Autrement dit\u00a0:</p>\n<ul>\n<li>L\u2019entit\u00e9 <em>Todo</em> n\u2019a pas la moindre id\u00e9e de ce qu\u2019est\u00a0<strong>Prisma</strong>,</li>\n<li>Le use-case ne conna\u00eet pas\u00a0<strong>Express</strong>,</li>\n<li>Et si demain vous remplacez Postgres par un CSV (ne riez pas, \u00e7a arrive), votre code m\u00e9tier s\u2019en fiche royalement.</li>\n</ul>\n<p>D\u2019o\u00f9 l\u2019objectif de ce guide\u00a0: <strong>impl\u00e9menter une API Todo NestJS 100 % Clean</strong>, sans \u00e9garer une seule ligne m\u00e9tier dans le contr\u00f4leur.<br> Juste du <strong>TypeScript </strong>et<strong> </strong>un peu de <strong>DI\u00a0NestJS.</strong></p>\n<h3>Ressources</h3>\n<ul>\n<li>Si vous n\u2019\u00eates pas familier avec le DDD (Domain Driven Design), je vous sugg\u00e8re fortement de lire mon pr\u00e9c\u00e9dent article \u2192 <a href=\"https://medium.com/@romain.bourree/nestjs-domain-driven-design-ab5364e5ee2f\"><strong>Lien\u00a0Medium</strong></a>\n</li>\n<li>Le livre de <strong>Robert C. Martin</strong> \u2192 <a href=\"https://www.amazon.fr/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=sr_1_4?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=1EG31I8S70R7J&amp;dib=eyJ2IjoiMSJ9.k4C0j2mk7htO4V1mPf8G-hGSEdfsuhvVdWOJHDzh1S0CVElR-SUvGobqqdlFbHLo2oDjqfoxxXkqqqtw76FmLF8VjmmVeyg4ZLFgEYddwlz5R2He0FoZNmHvCicQpy2xtO34x2zKjFsjBn5g1jB0vFQkp8QghMb7QUI_IZp8lCJYMhYb8htALE9xaxr_cIeFhkERSv-lBoaVjLP4gRkniUMm4hGauX3FxziYqlVdCSRtDX6mqN-Ja-Ku36TgwWBxkNl02gykZm-c9v1ooCA8tYh1iPA_fDI0rCRdA4HD-Wk.gNmuHcu60NhJOIK_SHmOsT0G8qsQSoDK1iV30NzS3aw&amp;dib_tag=se&amp;keywords=Robert+C.+Martin&amp;qid=1747301593&amp;sprefix=robert+c.+martin%2Caps%2C84&amp;sr=8-4&amp;ufe=app_do%3Aamzn1.fos.bb6ea7e0-0ef7-4fc8-9adc-4bf1477881dd\"><strong>Lien\u00a0Amazon</strong></a>\n</li>\n<li>Le d\u00e9p\u00f4t git de cet article -&gt;<strong> </strong><a href=\"https://github.com/Rbourree/NEST-CleanArchitecture\"><strong>Lien\u00a0Github</strong></a>\n</li>\n</ul>\n<h3>1. Un peu de\u00a0th\u00e9orie</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*iXidWCYCHTZlxXQp.png\"></figure><h4><strong>1.1. Un principe directeur\u00a0: la r\u00e8gle de d\u00e9pendance</strong></h4>\n<p>Les concr\u00e9tions techniques (bases de donn\u00e9es, frameworks web, ORM, cloud) doivent d\u00e9pendre de la logique m\u00e9tier, jamais l\u2019inverse.<br> Autrement dit\u00a0: si vous retirez NestJS ou Prisma, votre c\u0153ur m\u00e9tier continue de compiler.</p>\n<h4><strong>1.2. Les trois anneaux indispensables</strong></h4>\n<ul>\n<li>\n<strong>Core Domain</strong><br> R\u00e8gles m\u00e9tier pures\u00a0: entit\u00e9s, value objects, invariants.<br> Aucune librairie externe. Z\u00e9ro d\u00e9corateur NestJS. Z\u00e9ro\u00a0SQL.</li>\n<li>\n<strong>Application</strong><br> Cas d\u2019usage (use-cases) ou services applicatifs.<br> Ils orchestrent le domaine, pilotent les transactions et d\u00e9crivent <em>ce qui doit se passer</em> sans savoir <em>comment</em> c\u2019est stock\u00e9 ou\u00a0servi.</li>\n<li>\n<strong>Infrastructure</strong><br> Adaptateurs concrets\u00a0: Prisma, Postgres, HTTP, mailer, cache, file system\u2026<br> Ils convertissent les ports d\u00e9finis par la couche Application en appels\u00a0r\u00e9els.</li>\n</ul>\n<p>Les fl\u00e8ches de d\u00e9pendance pointent toujours de l\u2019ext\u00e9rieur vers l\u2019int\u00e9rieur\u00a0; jamais l\u2019inverse.</p>\n<h4><strong>1.3. Ports &amp; Adapters\u00a0: la colle qui\u00a0isole</strong></h4>\n<ul>\n<li>Un <strong>port</strong> = interface d\u00e9finie c\u00f4t\u00e9 Application (ex. TodoRepository).</li>\n<li>Un <strong>adapter</strong> = impl\u00e9mentation situ\u00e9e en Infrastructure (ex. TodoPrismaRepository).<br> Ainsi, changer Postgres pour MongoDB revient \u00e0 cr\u00e9er un nouvel adapter\u200a\u2014\u200aaucun fichier m\u00e9tier \u00e0 modifier.</li>\n</ul>\n<h4><strong>1.4. Pourquoi c\u2019est pr\u00e9cieux\u00a0?</strong></h4>\n<ul>\n<li>\n<strong>Testabilit\u00e9 imm\u00e9diate</strong>\u00a0: on teste Core + Application en m\u00e9moire, sans Docker ni\u00a0r\u00e9seau.</li>\n<li>\n<strong>\u00c9volutivit\u00e9 sereine</strong>\u00a0: quand la base de donn\u00e9es, la queue de messages ou le framework front changent, le domaine reste\u00a0intact.</li>\n<li>\n<strong>Lisibilit\u00e9</strong>\u00a0: le code m\u00e9tier n\u2019est plus noy\u00e9 dans les contr\u00f4leurs ou les migrations, il vit dans un dossier d\u00e9di\u00e9, \u00e9crit dans un langage quasi\u00a0humain.</li>\n</ul>\n<h4><strong>1.5. Attention aux d\u00e9rapages classiques</strong></h4>\n<ul>\n<li>Instancier un PrismaService dans votre entit\u00e9 \u00ab\u00a0juste pour logger\u00a0\u00bb\u00a0: violation directe de la r\u00e8gle de d\u00e9pendance.</li>\n<li>Laisser un if (dto.isAdmin) dans un contr\u00f4leur\u00a0: la politique m\u00e9tier doit se trouver dans un use-case ou le\u00a0domaine.</li>\n<li>M\u00e9langer validation HTTP (class-validator) et validation m\u00e9tier\u00a0: la premi\u00e8re appartient \u00e0 l\u2019infrastructure (bordure web), la seconde au\u00a0Core.</li>\n</ul>\n<h4><strong>1.6. Comment l\u2019adopter sans douleur\u00a0?</strong></h4>\n<ol>\n<li>\n<strong>Commencez par une petite feature</strong> (ex. Todo)\u00a0; isolez-la proprement.</li>\n<li>\n<strong>\u00c9crivez les interfaces</strong> des ports avant les impl\u00e9mentations concr\u00e8tes\u00a0: vous forcez ainsi le respect de la d\u00e9pendance.</li>\n<li>\n<strong>Ajoutez progressivement</strong> les autres modules (User, Billing\u2026) en copiant le m\u00eame\u00a0sch\u00e9ma.</li>\n<li>\n<strong>Outillez-vous</strong>\u00a0: ESLint peut interdire les imports transverses (\u00ab\u00a0infra \u2192 core\u00a0\u00bb).</li>\n</ol>\n<p><em>Gardez cette image de l\u2019oignon en t\u00eate\u00a0: chaque anneau prot\u00e8ge l\u2019int\u00e9rieur. Si \u00e7a vous fait pleurer, c\u2019est juste la preuve que vous coupez enfin au bon\u00a0endroit.</em></p>\n<h3>2. Un peu de\u00a0code</h3>\n<h4>2.1. Cr\u00e9er le\u00a0projet</h4>\n<pre>nest new nest-clean-architecture<br>cd nest-clean-architecture<br>npm i prisma @prisma/client</pre>\n<h4>2.2. Initialiser la\u00a0base</h4>\n<pre>npx prisma init</pre>\n<pre>// prisma/schema.prisma<br><br>model Todo {<br>  id    String @id<br>  title String<br>  done  Boolean @default(false)<br>}</pre>\n<pre>npx prisma migrate dev --name init</pre>\n<h4>2.3. Organiser l\u2019arborescence</h4>\n<pre>src/<br>\u2514\u2500\u2500 todo/<br>    \u251c\u2500\u2500 core/ --&gt; Pas de Nest, pas de BDD, aucun import le coeur du metier ici<br>    \u2502   \u251c\u2500\u2500 domain/<br>    \u2502   \u2514\u2500\u2500 application/<br>    \u251c\u2500\u2500 infrastructure/  --&gt; Toutes les d\u00e9pendances infra ici (BDD)<br>    \u2502   \u2514\u2500\u2500 prisma/<br>    \u2514\u2500\u2500 presentation/ --&gt; Tous les points d'entr\u00e9s (HTTP, GraphQL, CLI, etc..)<br>        \u2514\u2500\u2500 http/</pre>\n<h4>2.4. Couche\u00a0Domain</h4>\n<pre>// src/todo/core/domain/todo.entity.ts<br><br>export class Todo {<br>  constructor(<br>    public readonly id: string,<br>    private _title: string,<br>    private _done = false,<br>  ) {<br>    if (!_title.trim()) throw new Error('Title required');<br>  }<br><br>  get title() { return this._title; }<br>  get done()  { return this._done; }<br>  complete() { this._done = true; }<br>}</pre>\n<pre>// src/todo/core/domain/todo-title.value-object.ts<br><br>export class TodoTitle {<br>  constructor(private readonly value: string) {<br>    if (!value.trim()) throw new Error('Empty title');<br>  }<br>  unwrap() { return this.value; }<br>}</pre>\n<h4>2.5. Couche Application</h4>\n<p>Port</p>\n<pre>// src/todo/core/application/port/todo.repository.ts<br><br>import { Todo } from '../../domain/todo.entity';<br><br>export abstract class TodoRepository {<br>  abstract save(todo: Todo): Promise&lt;Todo&gt;;<br>  abstract findAll(): Promise&lt;Todo[]&gt;;<br>}</pre>\n<p>Use-cases</p>\n<pre>// src/todo/code/application/use-cases/create-todo.use-case.ts<br><br>import { TodoRepository } from '../port/todo.repository';<br>import { Todo } from '../../domain/todo.entity';<br>import { randomUUID } from 'crypto';<br><br>export class CreateTodoUseCase {<br>  constructor(private readonly repo: TodoRepository) {}<br>  async execute(title: string): Promise&lt;Todo&gt; {<br>    const todo = new Todo(randomUUID(), title);<br>    return this.repo.save(todo);<br>  }<br>}</pre>\n<pre>// list-todo.use-case.ts<br><br>export class ListTodoUseCase {<br>  constructor(private readonly repo: TodoRepository) {}<br><br>  execute() { return this.repo.findAll(); }<br>}</pre>\n<h4>2.6. Couche Infrastructure</h4>\n<pre>// src/todo/infrastructure/prisma/todo.prisma.repository.ts<br><br>import { TodoRepository } from '../../core/application/port/todo.repository';<br>import { Todo } from '../../core/domain/todo.entity';<br>import { PrismaClient } from '@prisma/client';<br><br>export class TodoPrismaRepository extends TodoRepository {<br>  constructor(private readonly prisma = new PrismaClient()) { super(); }<br>  async save(todo: Todo) {<br>    await this.prisma.todo.upsert({<br>      where: { id: todo.id },<br>      update: { done: todo.done, title: todo.title },<br>      create: { id: todo.id, done: todo.done, title: todo.title },<br>    });<br>    return todo;<br>  }<br>  async findAll() {<br>    const rows = await this.prisma.todo.findMany();<br>    return rows.map(r =&gt; new Todo(r.id, r.title, r.done));<br>  }<br>}<br></pre>\n<h4>2.7. Couche Presentation /\u00a0HTTP</h4>\n<p>DTO</p>\n<pre>// src/todo/presentation/http/dto/create-todo.dto.ts<br><br>import { IsString, MinLength } from 'class-validator';<br><br>export class CreateTodoDto {<br>  @IsString()<br>  @MinLength(1)<br>  title!: string;<br>}</pre>\n<p>Controller</p>\n<pre>// src/todo/presentation/http/todo.controller.ts<br><br>import { Body, Controller, Get, Post } from '@nestjs/common';<br>import { CreateTodoUseCase } from '../../../core/application/use-cases/create-todo.use-case';<br>import { ListTodoUseCase }   from '../../../core/application/use-cases/list-todo.use-case';<br>import { CreateTodoDto } from './dto/create-todo.dto';<br><br>@Controller('todos')<br>export class TodoController {<br>  constructor(<br>    private readonly create: CreateTodoUseCase,<br>    private readonly list:   ListTodoUseCase,<br>  ) {}<br>  @Post()<br>  createTodo(@Body() dto: CreateTodoDto) {<br>    return this.create.execute(dto.title);<br>  }<br>  @Get()<br>  listTodos() {<br>    return this.list.execute();<br>  }<br>}<br></pre>\n<p>Module Todo</p>\n<pre>// src/todo/todo.module.ts<br><br>import { Module } from '@nestjs/common';<br>import { TodoController } from './presentation/http/todo.controller';<br>import { TodoPrismaRepository } from './infrastructure/prisma/todo.prisma.repository';<br>import { CreateTodoUseCase } from './core/application/use-cases/create-todo.use-case';<br>import { ListTodoUseCase } from './core/application/use-cases/list-todo.use-case';<br>import { CompleteTodoUseCase } from './core/application/use-cases/complete-todo.use-case';<br>import { TodoRepository } from './core/application/todo.repository';<br>@Module({<br>  imports: [],<br>  controllers: [TodoController],<br>  providers: [<br>    CreateTodoUseCase,<br>    ListTodoUseCase,<br>    CompleteTodoUseCase,<br>    {<br>      provide: CreateTodoUseCase,<br>      useFactory: (repo: TodoRepository) =&gt; new CreateTodoUseCase(repo),<br>      inject: [TodoRepository],<br>    },<br>    {<br>      provide: ListTodoUseCase,<br>      useFactory: (repo: TodoRepository) =&gt; new ListTodoUseCase(repo),<br>      inject: [TodoRepository],<br>    },<br>    {<br>      provide: CompleteTodoUseCase,<br>      useFactory: (repo: TodoRepository) =&gt; new CompleteTodoUseCase(repo),<br>      inject: [TodoRepository],<br>    },<br>    {<br>      provide: TodoRepository,<br>      useClass: TodoPrismaRepository,<br>    },<br>  ],<br>  exports: [],<br>})<br>export class TodoModule {}</pre>\n<h4>2.8. Module\u00a0racine</h4>\n<pre>// src/app.module.ts<br><br>import { Module } from '@nestjs/common';<br>import { PrismaModule } from '../prisma/prisma.module';<br>import { TodoModule } from './todo/todo.module';<br><br>@Module({<br>  imports: [PrismaModule, TodoModule],<br>})<br>export class AppModule {}</pre>\n<h4>2.9. Main.ts</h4>\n<pre>// main.ts<br><br>import { NestFactory } from '@nestjs/core';<br>import { AppModule } from './app.module';<br>import { ValidationPipe } from '@nestjs/common';<br><br>async function bootstrap() {<br>  const app = await NestFactory.create(AppModule);<br>  app.useGlobalPipes(new ValidationPipe());<br>  await app.listen(process.env.PORT ?? 3000);<br>}<br>bootstrap().catch((error) =&gt; {<br>  console.error('Error starting the application:', error);<br>});</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f8184c5ae1a3\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gSPwd3lFDhp0HSGKkEYZTA.png\"></figure><h3>Introduction</h3>\n<p>Vous venez de relire un contr\u00f4leur de <strong>721 lignes</strong>\u00a0?<br> Vous avez vu un repository injecter un service\u2026 qui r\u00e9-injecte le m\u00eame repository\u00a0?<br>Vous entendez encore la voix du stagiaire expliquer \u00ab\u00a0j\u2019ai mis la logique m\u00e9tier <em>l\u00e0</em> parce que c\u2019\u00e9tait plus simple\u00a0\u00bb\u00a0?</p>\n<p>Bienvenue dans la vraie vie du d\u00e9veloppeur back-end\u200a\u2014\u200al\u00e0 o\u00f9 la dette technique pousse plus vite que les mauvaises herbes dans un potager\u00a0normand.</p>\n<p>En 2012, <strong>Robert C. Martin</strong> (alias <em>Uncle Bob</em>) publie son fameux sch\u00e9ma\u00a0: un c\u0153ur de r\u00e8gles m\u00e9tier intouchable, puis des anneaux concentriques pour l\u2019application, l\u2019infrastructure et enfin l\u2019interface.<br> Le principe\u200a\u2014\u200aappel\u00e9 <strong>Clean Architecture</strong>\u200a\u2014\u200atient en une phrase\u00a0:</p>\n<blockquote><strong>Les d\u00e9pendances doivent toujours pointer vers le centre, jamais l\u2019inverse.</strong></blockquote>\n<p>Autrement dit\u00a0:</p>\n<ul>\n<li>L\u2019entit\u00e9 <em>Todo</em> n\u2019a pas la moindre id\u00e9e de ce qu\u2019est\u00a0<strong>Prisma</strong>,</li>\n<li>Le use-case ne conna\u00eet pas\u00a0<strong>Express</strong>,</li>\n<li>Et si demain vous remplacez Postgres par un CSV (ne riez pas, \u00e7a arrive), votre code m\u00e9tier s\u2019en fiche royalement.</li>\n</ul>\n<p>D\u2019o\u00f9 l\u2019objectif de ce guide\u00a0: <strong>impl\u00e9menter une API Todo NestJS 100 % Clean</strong>, sans \u00e9garer une seule ligne m\u00e9tier dans le contr\u00f4leur.<br> Juste du <strong>TypeScript </strong>et<strong> </strong>un peu de <strong>DI\u00a0NestJS.</strong></p>\n<h3>Ressources</h3>\n<ul>\n<li>Si vous n\u2019\u00eates pas familier avec le DDD (Domain Driven Design), je vous sugg\u00e8re fortement de lire mon pr\u00e9c\u00e9dent article \u2192 <a href=\"https://medium.com/@romain.bourree/nestjs-domain-driven-design-ab5364e5ee2f\"><strong>Lien\u00a0Medium</strong></a>\n</li>\n<li>Le livre de <strong>Robert C. Martin</strong> \u2192 <a href=\"https://www.amazon.fr/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=sr_1_4?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=1EG31I8S70R7J&amp;dib=eyJ2IjoiMSJ9.k4C0j2mk7htO4V1mPf8G-hGSEdfsuhvVdWOJHDzh1S0CVElR-SUvGobqqdlFbHLo2oDjqfoxxXkqqqtw76FmLF8VjmmVeyg4ZLFgEYddwlz5R2He0FoZNmHvCicQpy2xtO34x2zKjFsjBn5g1jB0vFQkp8QghMb7QUI_IZp8lCJYMhYb8htALE9xaxr_cIeFhkERSv-lBoaVjLP4gRkniUMm4hGauX3FxziYqlVdCSRtDX6mqN-Ja-Ku36TgwWBxkNl02gykZm-c9v1ooCA8tYh1iPA_fDI0rCRdA4HD-Wk.gNmuHcu60NhJOIK_SHmOsT0G8qsQSoDK1iV30NzS3aw&amp;dib_tag=se&amp;keywords=Robert+C.+Martin&amp;qid=1747301593&amp;sprefix=robert+c.+martin%2Caps%2C84&amp;sr=8-4&amp;ufe=app_do%3Aamzn1.fos.bb6ea7e0-0ef7-4fc8-9adc-4bf1477881dd\"><strong>Lien\u00a0Amazon</strong></a>\n</li>\n<li>Le d\u00e9p\u00f4t git de cet article -&gt;<strong> </strong><a href=\"https://github.com/Rbourree/NEST-CleanArchitecture\"><strong>Lien\u00a0Github</strong></a>\n</li>\n</ul>\n<h3>1. Un peu de\u00a0th\u00e9orie</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*iXidWCYCHTZlxXQp.png\"></figure><h4><strong>1.1. Un principe directeur\u00a0: la r\u00e8gle de d\u00e9pendance</strong></h4>\n<p>Les concr\u00e9tions techniques (bases de donn\u00e9es, frameworks web, ORM, cloud) doivent d\u00e9pendre de la logique m\u00e9tier, jamais l\u2019inverse.<br> Autrement dit\u00a0: si vous retirez NestJS ou Prisma, votre c\u0153ur m\u00e9tier continue de compiler.</p>\n<h4><strong>1.2. Les trois anneaux indispensables</strong></h4>\n<ul>\n<li>\n<strong>Core Domain</strong><br> R\u00e8gles m\u00e9tier pures\u00a0: entit\u00e9s, value objects, invariants.<br> Aucune librairie externe. Z\u00e9ro d\u00e9corateur NestJS. Z\u00e9ro\u00a0SQL.</li>\n<li>\n<strong>Application</strong><br> Cas d\u2019usage (use-cases) ou services applicatifs.<br> Ils orchestrent le domaine, pilotent les transactions et d\u00e9crivent <em>ce qui doit se passer</em> sans savoir <em>comment</em> c\u2019est stock\u00e9 ou\u00a0servi.</li>\n<li>\n<strong>Infrastructure</strong><br> Adaptateurs concrets\u00a0: Prisma, Postgres, HTTP, mailer, cache, file system\u2026<br> Ils convertissent les ports d\u00e9finis par la couche Application en appels\u00a0r\u00e9els.</li>\n</ul>\n<p>Les fl\u00e8ches de d\u00e9pendance pointent toujours de l\u2019ext\u00e9rieur vers l\u2019int\u00e9rieur\u00a0; jamais l\u2019inverse.</p>\n<h4><strong>1.3. Ports &amp; Adapters\u00a0: la colle qui\u00a0isole</strong></h4>\n<ul>\n<li>Un <strong>port</strong> = interface d\u00e9finie c\u00f4t\u00e9 Application (ex. TodoRepository).</li>\n<li>Un <strong>adapter</strong> = impl\u00e9mentation situ\u00e9e en Infrastructure (ex. TodoPrismaRepository).<br> Ainsi, changer Postgres pour MongoDB revient \u00e0 cr\u00e9er un nouvel adapter\u200a\u2014\u200aaucun fichier m\u00e9tier \u00e0 modifier.</li>\n</ul>\n<h4><strong>1.4. Pourquoi c\u2019est pr\u00e9cieux\u00a0?</strong></h4>\n<ul>\n<li>\n<strong>Testabilit\u00e9 imm\u00e9diate</strong>\u00a0: on teste Core + Application en m\u00e9moire, sans Docker ni\u00a0r\u00e9seau.</li>\n<li>\n<strong>\u00c9volutivit\u00e9 sereine</strong>\u00a0: quand la base de donn\u00e9es, la queue de messages ou le framework front changent, le domaine reste\u00a0intact.</li>\n<li>\n<strong>Lisibilit\u00e9</strong>\u00a0: le code m\u00e9tier n\u2019est plus noy\u00e9 dans les contr\u00f4leurs ou les migrations, il vit dans un dossier d\u00e9di\u00e9, \u00e9crit dans un langage quasi\u00a0humain.</li>\n</ul>\n<h4><strong>1.5. Attention aux d\u00e9rapages classiques</strong></h4>\n<ul>\n<li>Instancier un PrismaService dans votre entit\u00e9 \u00ab\u00a0juste pour logger\u00a0\u00bb\u00a0: violation directe de la r\u00e8gle de d\u00e9pendance.</li>\n<li>Laisser un if (dto.isAdmin) dans un contr\u00f4leur\u00a0: la politique m\u00e9tier doit se trouver dans un use-case ou le\u00a0domaine.</li>\n<li>M\u00e9langer validation HTTP (class-validator) et validation m\u00e9tier\u00a0: la premi\u00e8re appartient \u00e0 l\u2019infrastructure (bordure web), la seconde au\u00a0Core.</li>\n</ul>\n<h4><strong>1.6. Comment l\u2019adopter sans douleur\u00a0?</strong></h4>\n<ol>\n<li>\n<strong>Commencez par une petite feature</strong> (ex. Todo)\u00a0; isolez-la proprement.</li>\n<li>\n<strong>\u00c9crivez les interfaces</strong> des ports avant les impl\u00e9mentations concr\u00e8tes\u00a0: vous forcez ainsi le respect de la d\u00e9pendance.</li>\n<li>\n<strong>Ajoutez progressivement</strong> les autres modules (User, Billing\u2026) en copiant le m\u00eame\u00a0sch\u00e9ma.</li>\n<li>\n<strong>Outillez-vous</strong>\u00a0: ESLint peut interdire les imports transverses (\u00ab\u00a0infra \u2192 core\u00a0\u00bb).</li>\n</ol>\n<p><em>Gardez cette image de l\u2019oignon en t\u00eate\u00a0: chaque anneau prot\u00e8ge l\u2019int\u00e9rieur. Si \u00e7a vous fait pleurer, c\u2019est juste la preuve que vous coupez enfin au bon\u00a0endroit.</em></p>\n<h3>2. Un peu de\u00a0code</h3>\n<h4>2.1. Cr\u00e9er le\u00a0projet</h4>\n<pre>nest new nest-clean-architecture<br>cd nest-clean-architecture<br>npm i prisma @prisma/client</pre>\n<h4>2.2. Initialiser la\u00a0base</h4>\n<pre>npx prisma init</pre>\n<pre>// prisma/schema.prisma<br><br>model Todo {<br>  id    String @id<br>  title String<br>  done  Boolean @default(false)<br>}</pre>\n<pre>npx prisma migrate dev --name init</pre>\n<h4>2.3. Organiser l\u2019arborescence</h4>\n<pre>src/<br>\u2514\u2500\u2500 todo/<br>    \u251c\u2500\u2500 core/ --&gt; Pas de Nest, pas de BDD, aucun import le coeur du metier ici<br>    \u2502   \u251c\u2500\u2500 domain/<br>    \u2502   \u2514\u2500\u2500 application/<br>    \u251c\u2500\u2500 infrastructure/  --&gt; Toutes les d\u00e9pendances infra ici (BDD)<br>    \u2502   \u2514\u2500\u2500 prisma/<br>    \u2514\u2500\u2500 presentation/ --&gt; Tous les points d'entr\u00e9s (HTTP, GraphQL, CLI, etc..)<br>        \u2514\u2500\u2500 http/</pre>\n<h4>2.4. Couche\u00a0Domain</h4>\n<pre>// src/todo/core/domain/todo.entity.ts<br><br>export class Todo {<br>  constructor(<br>    public readonly id: string,<br>    private _title: string,<br>    private _done = false,<br>  ) {<br>    if (!_title.trim()) throw new Error('Title required');<br>  }<br><br>  get title() { return this._title; }<br>  get done()  { return this._done; }<br>  complete() { this._done = true; }<br>}</pre>\n<pre>// src/todo/core/domain/todo-title.value-object.ts<br><br>export class TodoTitle {<br>  constructor(private readonly value: string) {<br>    if (!value.trim()) throw new Error('Empty title');<br>  }<br>  unwrap() { return this.value; }<br>}</pre>\n<h4>2.5. Couche Application</h4>\n<p>Port</p>\n<pre>// src/todo/core/application/port/todo.repository.ts<br><br>import { Todo } from '../../domain/todo.entity';<br><br>export abstract class TodoRepository {<br>  abstract save(todo: Todo): Promise&lt;Todo&gt;;<br>  abstract findAll(): Promise&lt;Todo[]&gt;;<br>}</pre>\n<p>Use-cases</p>\n<pre>// src/todo/code/application/use-cases/create-todo.use-case.ts<br><br>import { TodoRepository } from '../port/todo.repository';<br>import { Todo } from '../../domain/todo.entity';<br>import { randomUUID } from 'crypto';<br><br>export class CreateTodoUseCase {<br>  constructor(private readonly repo: TodoRepository) {}<br>  async execute(title: string): Promise&lt;Todo&gt; {<br>    const todo = new Todo(randomUUID(), title);<br>    return this.repo.save(todo);<br>  }<br>}</pre>\n<pre>// list-todo.use-case.ts<br><br>export class ListTodoUseCase {<br>  constructor(private readonly repo: TodoRepository) {}<br><br>  execute() { return this.repo.findAll(); }<br>}</pre>\n<h4>2.6. Couche Infrastructure</h4>\n<pre>// src/todo/infrastructure/prisma/todo.prisma.repository.ts<br><br>import { TodoRepository } from '../../core/application/port/todo.repository';<br>import { Todo } from '../../core/domain/todo.entity';<br>import { PrismaClient } from '@prisma/client';<br><br>export class TodoPrismaRepository extends TodoRepository {<br>  constructor(private readonly prisma = new PrismaClient()) { super(); }<br>  async save(todo: Todo) {<br>    await this.prisma.todo.upsert({<br>      where: { id: todo.id },<br>      update: { done: todo.done, title: todo.title },<br>      create: { id: todo.id, done: todo.done, title: todo.title },<br>    });<br>    return todo;<br>  }<br>  async findAll() {<br>    const rows = await this.prisma.todo.findMany();<br>    return rows.map(r =&gt; new Todo(r.id, r.title, r.done));<br>  }<br>}<br></pre>\n<h4>2.7. Couche Presentation /\u00a0HTTP</h4>\n<p>DTO</p>\n<pre>// src/todo/presentation/http/dto/create-todo.dto.ts<br><br>import { IsString, MinLength } from 'class-validator';<br><br>export class CreateTodoDto {<br>  @IsString()<br>  @MinLength(1)<br>  title!: string;<br>}</pre>\n<p>Controller</p>\n<pre>// src/todo/presentation/http/todo.controller.ts<br><br>import { Body, Controller, Get, Post } from '@nestjs/common';<br>import { CreateTodoUseCase } from '../../../core/application/use-cases/create-todo.use-case';<br>import { ListTodoUseCase }   from '../../../core/application/use-cases/list-todo.use-case';<br>import { CreateTodoDto } from './dto/create-todo.dto';<br><br>@Controller('todos')<br>export class TodoController {<br>  constructor(<br>    private readonly create: CreateTodoUseCase,<br>    private readonly list:   ListTodoUseCase,<br>  ) {}<br>  @Post()<br>  createTodo(@Body() dto: CreateTodoDto) {<br>    return this.create.execute(dto.title);<br>  }<br>  @Get()<br>  listTodos() {<br>    return this.list.execute();<br>  }<br>}<br></pre>\n<p>Module Todo</p>\n<pre>// src/todo/todo.module.ts<br><br>import { Module } from '@nestjs/common';<br>import { TodoController } from './presentation/http/todo.controller';<br>import { TodoPrismaRepository } from './infrastructure/prisma/todo.prisma.repository';<br>import { CreateTodoUseCase } from './core/application/use-cases/create-todo.use-case';<br>import { ListTodoUseCase } from './core/application/use-cases/list-todo.use-case';<br>import { CompleteTodoUseCase } from './core/application/use-cases/complete-todo.use-case';<br>import { TodoRepository } from './core/application/todo.repository';<br>@Module({<br>  imports: [],<br>  controllers: [TodoController],<br>  providers: [<br>    CreateTodoUseCase,<br>    ListTodoUseCase,<br>    CompleteTodoUseCase,<br>    {<br>      provide: CreateTodoUseCase,<br>      useFactory: (repo: TodoRepository) =&gt; new CreateTodoUseCase(repo),<br>      inject: [TodoRepository],<br>    },<br>    {<br>      provide: ListTodoUseCase,<br>      useFactory: (repo: TodoRepository) =&gt; new ListTodoUseCase(repo),<br>      inject: [TodoRepository],<br>    },<br>    {<br>      provide: CompleteTodoUseCase,<br>      useFactory: (repo: TodoRepository) =&gt; new CompleteTodoUseCase(repo),<br>      inject: [TodoRepository],<br>    },<br>    {<br>      provide: TodoRepository,<br>      useClass: TodoPrismaRepository,<br>    },<br>  ],<br>  exports: [],<br>})<br>export class TodoModule {}</pre>\n<h4>2.8. Module\u00a0racine</h4>\n<pre>// src/app.module.ts<br><br>import { Module } from '@nestjs/common';<br>import { PrismaModule } from '../prisma/prisma.module';<br>import { TodoModule } from './todo/todo.module';<br><br>@Module({<br>  imports: [PrismaModule, TodoModule],<br>})<br>export class AppModule {}</pre>\n<h4>2.9. Main.ts</h4>\n<pre>// main.ts<br><br>import { NestFactory } from '@nestjs/core';<br>import { AppModule } from './app.module';<br>import { ValidationPipe } from '@nestjs/common';<br><br>async function bootstrap() {<br>  const app = await NestFactory.create(AppModule);<br>  app.useGlobalPipes(new ValidationPipe());<br>  await app.listen(process.env.PORT ?? 3000);<br>}<br>bootstrap().catch((error) =&gt; {<br>  console.error('Error starting the application:', error);<br>});</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f8184c5ae1a3\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["tutorial","nestjs-tutorial","typescript","nestjs","clean-architecture"]},{"title":"NestJS &amp; Domain Driven Design","pubDate":"2025-05-14 13:10:57","link":"https://medium.com/@romain.bourree/nestjs-domain-driven-design-ab5364e5ee2f?source=rss-1e15ea226876------2","guid":"https://medium.com/p/ab5364e5ee2f","author":"Romain BOURR\u00c9E","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8lRIOVYtFKHBhK7yefdSPg.png\"></figure><h3>Introduction</h3>\n<p>En 2003, <strong>Eric Evans</strong> publie le livre devenu culte\u00a0: <em>\u201c</em><a href=\"https://www.amazon.fr/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2BCZET4SXTWDI&amp;dib=eyJ2IjoiMSJ9.ugzVjZa0uaqt94P8SyDAe1y87wNc6e-cIGuzyKDzMwyRBJai46dM_qIextbKIpTH.-8ezXIbKK1328abpxpQf9FvTimmWh7ju12KOammT7Zc&amp;dib_tag=se&amp;keywords=Domain-Driven+Design+-+Tackling+Complexity+in+the+Heart+of+Software&amp;qid=1747216122&amp;sprefix=domain-driven+design+-+tackling+complexity+in+the+heart+of+software%2Caps%2C284&amp;sr=8-1&amp;ufe=app_do%3Aamzn1.fos.bb6ea7e0-0ef7-4fc8-9adc-4bf1477881dd\"><em>Domain-Driven Design\u200a\u2014\u200aTackling Complexity in the Heart of Software</em></a><em>\u201d</em>. \u00c0 l\u2019\u00e9poque, les projets Java EE gonflent comme des souffl\u00e9s \u00e0 la puissance de mille <em>XML</em>\u00a0; les \u00e9quipes croulent sous les <strong>\u201cBig Ball of Mud\u201d</strong> (ces blobs de classes an\u00e9mone o\u00f9 la logique m\u00e9tier et la persistance se font des c\u00e2lins). Evans propose alors une id\u00e9e simple mais r\u00e9volutionnaire\u00a0: <strong>mettre le m\u00e9tier au centre</strong> et laisser la technique s\u2019organiser autour, plut\u00f4t que l\u2019inverse.</p>\n<p>Le <strong>DDD</strong> na\u00eet donc d\u2019un constat\u00a0: la vraie complexit\u00e9 n\u2019est pas dans les frameworks, mais dans la t\u00eate des clients (\u201cComment calcula-t-on exactement une remise fid\u00e9lit\u00e9\u00a0?\u201d). Pour \u00e9viter que ces r\u00e8gles ne se dissolvent entre le front et la base de donn\u00e9es, Evans formalise\u00a0:</p>\n<ul>\n<li>Un <strong>langage ubiquitaire</strong> partag\u00e9 par devs et experts m\u00e9tier\u00a0;</li>\n<li>Des <strong>entities</strong>, <strong>value objects</strong> et <strong>aggregates</strong> pour encapsuler les invariants\u00a0;</li>\n<li>Des <strong>repositories</strong> et <strong>services</strong> pour que la base, elle, reste au second plan\u00a0;</li>\n<li>Des <strong>bounded contexts</strong> afin que \u201ccatalogue\u201d chez l\u2019\u00e9quipe A ne se transforme pas en \u201cbooking\u201d chez l\u2019\u00e9quipe\u00a0B.</li>\n</ul>\n<p>Vingt ans plus tard, TypeScript a remplac\u00e9 le <em>XML</em> (ouf), mais la tentation de coller trois any dans un contr\u00f4leur REST plane toujours. C\u2019est l\u00e0 que <strong>NestJS</strong> brille\u00a0: ce framework apporte l\u2019injection de d\u00e9pendances, les d\u00e9corateurs et la modularit\u00e9 qu\u2019il faut pour <strong>impl\u00e9menter le DDD sans transpirer</strong>. Dans ce guide (m\u00eame pas long, promis), on va marier les deux\u00a0: NestJS pour la plomberie, DDD pour le\u00a0cerveau.</p>\n<h3>Ressources</h3>\n<ul>\n<li>D\u00e9pot Git \u2192\u00a0<a href=\"https://github.com/Rbourree/NEST-DDD\">NEST-DDD</a>\n</li>\n<li>Livre sur le DDD \u2192 <a href=\"https://www.amazon.fr/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2BCZET4SXTWDI&amp;dib=eyJ2IjoiMSJ9.ugzVjZa0uaqt94P8SyDAe1y87wNc6e-cIGuzyKDzMwyRBJai46dM_qIextbKIpTH.-8ezXIbKK1328abpxpQf9FvTimmWh7ju12KOammT7Zc&amp;dib_tag=se&amp;keywords=Domain-Driven+Design+-+Tackling+Complexity+in+the+Heart+of+Software&amp;qid=1747216122&amp;sprefix=domain-driven+design+-+tackling+complexity+in+the+heart+of+software%2Caps%2C284&amp;sr=8-1&amp;ufe=app_do%3Aamzn1.fos.bb6ea7e0-0ef7-4fc8-9adc-4bf1477881dd\">Lien\u00a0Amazon</a>\n</li>\n</ul>\n<h3>1. Le DDD qu\u2019est ce que c\u2019est\u00a0?</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lED5IerLislIF-vU\"><figcaption>Photo by <a href=\"https://unsplash.com/@disruptxn?utm_source=medium&amp;utm_medium=referral\">Desola Lanre-Ologun</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Imagine une application comme une ville\u00a0:</p>\n<ul>\n<li>Les <strong>frameworks</strong> sont les routes et les\u00a0\u00e9gouts.</li>\n<li>La <strong>base de donn\u00e9es</strong> est l\u2019entrep\u00f4t municipal.</li>\n<li>Les <strong>utilisateurs</strong> sont les habitants avec leurs vrais\u00a0besoins.</li>\n</ul>\n<p>En 2003, Eric Evans publie <em>Domain-Driven Design</em> et dit, en substance\u00a0: \u00ab\u00a0Arr\u00eatons de b\u00e2tir des autoroutes avant de savoir o\u00f9 sont les maisons\u00a0! Pla\u00e7ons d\u2019abord le <strong>domaine</strong> c\u2019est-\u00e0-dire la logique m\u00e9tier au centre, puis tirons les c\u00e2bles autour.\u00a0\u00bb</p>\n<h4>1.1 Les ingr\u00e9dients de\u00a0base</h4>\n<a href=\"https://medium.com/media/d12168df9f6334b7f323248d9d285e07/href\">https://medium.com/media/d12168df9f6334b7f323248d9d285e07/href</a><h4>1.2 Pourquoi s\u2019emb\u00eater\u00a0?</h4>\n<ol>\n<li>\n<strong>Lisibilit\u00e9</strong>\u00a0: on lit une r\u00e8gle m\u00e9tier dans Order.completePayment() au lieu de la traquer dans cent contr\u00f4leurs.</li>\n<li>\n<strong>\u00c9volutivit\u00e9</strong>\u00a0: nouvelles lois de la ville\u00a0? On modifie l\u2019urbanisme local, pas toute l\u2019infrastructure.</li>\n<li>\n<strong>Communication</strong>\u00a0: d\u00e9veloppeur et expert m\u00e9tier parlent la m\u00eame langue, pas \u201cDTO\u201d, \u201cDAO\u201d, \u201cfooBarServiceImpl42\u201d.</li>\n<li>\n<strong>Testabilit\u00e9</strong>\u00a0: le domaine pur se teste sans base ni\u00a0r\u00e9seau.</li>\n</ol>\n<h4>1.3 Ce que DDD n\u2019est\u00a0pas</h4>\n<ul>\n<li>\u274c Un framework ou une biblioth\u00e8que magique.</li>\n<li>\u274c R\u00e9serv\u00e9 aux m\u00e9ga-monolithes\u00a0; un micro-service complexe en profite\u00a0aussi.</li>\n<li>\u274c Synonyme obligatoire de CQRS, Event Sourcing ou Sagas\u00a0: ce sont des <strong>options</strong> pour certains besoins, pas la base du\u00a0DDD.</li>\n</ul>\n<h4>1.4 Quand l\u2019adopter\u00a0?</h4>\n<ul>\n<li>R\u00e8gles m\u00e9tier simples, CRUD pur \u2192 \ud83d\udfe1 Pas indispensable</li>\n<li>Domaine dense, notions ambigu\u00ebs (\u201ccommande\u201d, \u201cbooking\u201d\u2026) \u2192 \ud83d\udfe2Pertinent</li>\n<li>\u00c9quipe + experts m\u00e9tier disponibles pour affiner le langage \u2192 \ud83d\udfe2\u00a0Vital</li>\n<li>Projet PoC de 2 semaines \u2192 \ud83d\udd34\u00a0Overkill</li>\n</ul>\n<h4>1.5 Un mini-exemple TypeScript</h4>\n<pre>// Value Object<br>export class Amount {<br>  private constructor(private readonly cents: number) {}<br>  static euros(value: number) {<br>    if (value &lt; 0) throw new Error('Montant n\u00e9gatif interdit');<br>    return new Amount(Math.round(value * 100));<br>  }<br>  add(other: Amount) { return new Amount(this.cents + other.cents); }<br>}</pre>\n<pre>// Entity<br>export class Order {<br>  private paid = false;<br>  constructor(readonly id: string, private total: Amount) {}<br>  pay(amount: Amount) {<br>    if (this.paid) throw new Error('D\u00e9j\u00e0 pay\u00e9e');<br>    if (amount !== this.total) throw new Error('Montant incorrect');<br>    this.paid = true;<br>  }<br>}</pre>\n<p>Sans ORM, sans contr\u00f4leur\u00a0: juste la <strong>r\u00e8gle m\u00e9tier</strong> claire comme de l\u2019eau de\u00a0source.</p>\n<h4>TL;DR</h4>\n<p>Le DDD, c\u2019est <strong>construire la ville autour de ses habitants</strong>\u00a0: on part du domaine (ce qui a r\u00e9ellement de la valeur pour l\u2019utilisateur) et on laisse les d\u00e9tails techniques s\u2019aligner. R\u00e9sultat\u00a0: un code qui parle humain, r\u00e9siste mieux au temps et \u00e9vite de transformer chaque livraison en safari\u00a0bug.</p>\n<p>Alors, pr\u00eat \u00e0 chausser votre casque d\u2019urbaniste logiciel\u00a0?\u00a0\ud83d\udee0\ufe0f</p>\n<h3>2. Cr\u00e9ation de notre projet Nest de\u00a0base</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K9DtXc79NVN3d7Q6\"><figcaption>Photo by <a href=\"https://unsplash.com/@danist07?utm_source=medium&amp;utm_medium=referral\">Danist Soh</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p><em>(o\u00f9 l\u2019on fait na\u00eetre le squelette, range les bo\u00eetes et colle les \u00e9tiquettes avant de laisser la logique m\u00e9tier prendre le\u00a0pouvoir)</em></p>\n<h4>2.1. D\u00e9marrage express</h4>\n<pre># installe (ou met \u00e0 jour) le CLI Nest<br>npm i -g @nestjs/cli<br><br># g\u00e9n\u00e8re le projet de base<br>nest new todo-ddd<br>cd todo-ddd</pre>\n<p>Choisis <strong>npm</strong> ou <strong>pnpm</strong>\u00a0; si tu s\u00e9lectionnes Yarn, sache que le karma des d\u00e9pendances transitoires vient de baisser de 3\u00a0points.</p>\n<p>On va \u00e9galement run un postgres avec docker-compose. Cr\u00e9e donc un fichier docker-compose.yml \u00e0 la racine de ton projet avec\u00a0dedans:</p>\n<pre>version: \"3\"<br>services:<br>  db:<br>    image: postgres<br>    restart: always<br>    ports:<br>      - \"5432:5432\"<br>    environment:<br>      POSTGRES_PASSWORD: mypassword</pre>\n<p>On lance le container postgres</p>\n<pre>docker-compose up -d</pre>\n<h4>2.2. Branchons Prisma d\u00e8s le\u00a0d\u00e9part</h4>\n<pre>npm i prisma @prisma/client<br>npx prisma init         # cr\u00e9e prisma/schema.prisma + .env</pre>\n<p>Dans prisma/schema.prisma, on ajoute la table la plus sexy du monde\u00a0:</p>\n<pre>model Todo {<br>  id        String   @id @default(uuid())<br>  title     String<br>  isDone    Boolean  @default(false)<br>  createdAt DateTime @default(now())<br>}</pre>\n<p>Dans le fichier\u00a0.env on edite le path \u00e0 notre\u00a0BDD</p>\n<pre>DATABASE_URL=\"postgresql://postgres:mypassword@localhost:5432/mydb?schema=public\"</pre>\n<p>Puis\u00a0:</p>\n<pre>npx prisma migrate dev --name init<br>npx prisma generate</pre>\n<blockquote>Pourquoi si t\u00f4t\u00a0? Parce qu\u2019on \u00e9vite ainsi le syndrome \u201cd\u00e9pendances Schr\u00f6dinger\u201d\u00a0: on installe Prisma <strong>avant</strong> d\u2019avoir trente fichiers qui l\u2019appellent en\u00a0douce.</blockquote>\n<h4>2.3. Arborescence DDD de notre projet\u00a0Nest</h4>\n<pre>src/<br>\u251c\u2500 app.module.ts<br>\u251c\u2500 prisma/                  &lt;-- client &amp; module global<br>\u2502   \u251c\u2500 prisma.module.ts<br>\u2502   \u2514\u2500 prisma.service.ts<br>\u2514\u2500 tasks/<br>    \u251c\u2500 domain/             &lt;-- 100 % TypeScript pur (Pas de framework)<br>    \u2502   \u251c\u2500 entities/<br>    \u2502   \u2502   \u2514\u2500 todo.entity.ts<br>    \u2502   \u251c\u2500 value-objects/<br>    \u2502   \u2502   \u2514\u2500 title.vo.ts<br>    \u2502   \u2514\u2500 repositories/<br>    \u2502       \u2514\u2500 todo.repository.ts   (abstract class)<br>    \u251c\u2500 application/        &lt;-- services<br>    \u2502   \u2514\u2500 task.service.ts<br>    \u251c\u2500 infrastructure/     &lt;-- adapters I/O<br>    \u2502   \u2514\u2500 prisma-todo.repository.ts<br>    \u251c\u2500 interface/<br>    \u2502    \u2514\u2500 http/<br>    \u2502      \u2514\u2500 task.controller.ts<br>    \u2514\u2500 tasks.module.ts</pre>\n<blockquote>R\u00e8gle d\u2019or\u00a0: <strong>domain ne conna\u00eet personne</strong>, tout le monde conna\u00eet domain. Comme au lyc\u00e9e, mais sans la\u00a0cloche.</blockquote>\n<pre>// src/prisma/prisma.module.ts<br>import { Global, Module } from '@nestjs/common';<br>import { PrismaService } from './prisma.service';<br><br>@Global()<br>@Module({<br>  providers: [PrismaService],<br>  exports:   [PrismaService],<br>})<br>export class PrismaModule {}</pre>\n<pre>// src/prisma/prisma.service.ts<br>import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';<br>import { PrismaClient } from '@prisma/client';<br><br>@Injectable()<br>export class PrismaService<br>  extends PrismaClient<br>  implements OnModuleInit, OnModuleDestroy<br>{<br>  // Tu peux ajuster les niveaux de logs selon l\u2019environnement<br>  constructor() {<br>    super({<br>      log: ['warn', 'error'], // ou ['query', 'info', 'warn', 'error'] en dev<br>    });<br>  }<br><br>  async onModuleInit() {<br>    // Ouvre la connexion d\u00e8s que Nest d\u00e9marre<br>    await this.$connect();<br>  }<br><br>  async onModuleDestroy() {<br>    // Ferme proprement la connexion quand Nest s\u2019arr\u00eate<br>    await this.$disconnect();<br>  }<br><br>  /** Utilitaire pratique pour ex\u00e9cuter une transaction Prisma<br>   *   await prisma.$transaction(fn);<br>   */<br>}</pre>\n<pre>// src/app.module.ts<br>import { Module } from '@nestjs/common';<br>import { PrismaModule } from './prisma/prisma.module';  // global<br><br>@Module({<br>  imports: [<br>    // Charge les variables .env dans process.env<br>    ConfigModule.forRoot({ isGlobal: true }),           // \u2190 enl\u00e8ve-le si tu ne l\u2019utilises pas<br>    PrismaModule,                                       // rend PrismaService injectable<br>  ],<br>  // Pas de controllers ni providers ici : chaque module g\u00e8re les siens<br>})<br>export class AppModule {}</pre>\n<blockquote>Nous voil\u00e0 avec projet Nest de base et son arborescence en DDD pr\u00eat \u00e0 l\u2019emplois</blockquote>\n<h3>3. En route pour le vrai, le pur,\u00a0DDD</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*pmMTmawfdjsv2h0s\"><figcaption>Photo by <a href=\"https://unsplash.com/@jon_chng?utm_source=medium&amp;utm_medium=referral\">Jonathan Chng</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><blockquote>Tu as d\u00e9j\u00e0 ton squelette Nest + Prisma et l\u2019arborescence<br> domain / application / infrastructure / interface.<br> On remplit tout \u00e7a <strong>dans l\u2019ordre m\u00e9tier d\u2019abord, technique ensuite</strong>.</blockquote>\n<h4>3.1. Le domaine avant tout (TypeScript pur)</h4>\n<p><strong>3.1.1 Le value-object</strong></p>\n<pre>// src/tasks/domain/value-objects/title.vo.ts<br>export class Title {<br>  private constructor(private readonly value: string) {}<br><br>  static create(raw: string): Title {<br>    const t = raw?.trim();<br>    if (!t || t.length &lt; 3) {<br>      throw new Error('Title too short');<br>    }<br>    return new Title(t);<br>  }<br>  toString() {<br>    return this.value;<br>  }<br>}</pre>\n<p><strong>3.1.2 L\u2019entity</strong></p>\n<pre>// src/tasks/domain/entities/todo.entity.ts<br>import { Title } from '../value-objects/title.vo';<br><br>export class Todo {<br>  private done = false;<br>  constructor(readonly id: string, private _title: Title) {}<br>  complete() {<br>    if (this.done) throw new Error('Already done');<br>    this.done = true;<br>  }<br>  changeTitle(newTitle: Title) {<br>    this._title = newTitle;<br>  }<br>  get title()  { return this._title.toString(); }<br>  get isDone() { return this.done; }<br>}</pre>\n<p><strong>3.1.3 Le repository</strong></p>\n<pre>// src/tasks/domain/repositories/todo.repository.ts<br>export abstract class TodoRepository {<br>  abstract save(todo: Todo): Promise&lt;void&gt;;<br>  abstract findById(id: string): Promise&lt;Todo | null&gt;;<br>  abstract findAll(): Promise&lt;Todo[]&gt;;<br>}</pre>\n<h3>3.2. Couche application</h3>\n<pre>// src/tasks/application/task.service.ts<br>import { Injectable, Inject } from '@nestjs/common';<br>import { randomUUID } from 'crypto';<br>import { Todo } from '../domain/entities/todo.entity';<br>import { Title } from '../domain/value-objects/title.vo';<br>import { TodoRepository } from '../domain/repositories/todo.repository';<br><br>@Injectable()<br>export class TaskService {<br>  constructor(<br>    @Inject(TodoRepository) private readonly repo: TodoRepository,<br>  ) {}<br>  async createTodo(rawTitle: string) {<br>    const todo = new Todo(randomUUID(), Title.create(rawTitle));<br>    await this.repo.save(todo);<br>    return todo;<br>  }<br>  listTodos() {<br>    return this.repo.findAll();<br>  }<br>  async completeTodo(id: string) {<br>    const todo = await this.repo.findById(id);<br>    if (!todo) throw new Error('Todo not found');<br>    todo.complete();<br>    await this.repo.save(todo);<br>    return todo;<br>  }<br>}</pre>\n<h3>3.3. Infrastructure (adaptateur Prisma)</h3>\n<pre>// src/tasks/infrastructure/prisma-todo.repository.ts<br><br>import { Injectable } from '@nestjs/common';<br>import { PrismaService } from '../../prisma/prisma.service';<br>import { TodoRepository } from '../domain/repositories/todo.repository';<br>import { Todo } from '../domain/entities/todo.entity';<br>import { Title } from '../domain/value-objects/title.vo';<br><br>@Injectable()<br>export class PrismaTodoRepository implements TodoRepository {<br>  constructor(private readonly prisma: PrismaService) {}<br>  async save(todo: Todo) {<br>    await this.prisma.todo.upsert({<br>      where:  { id: todo.id },<br>      update: { title: todo.title, isDone: todo.isDone },<br>      create: { id: todo.id, title: todo.title, isDone: todo.isDone },<br>    });<br>  }<br>  async findById(id: string) {<br>    const row = await this.prisma.todo.findUnique({ where: { id } });<br>    if (!row) return null;<br>    const t = new Todo(row.id, Title.create(row.title));<br>    if (row.isDone) t.complete();<br>    return t;<br>  }<br>  async findAll() {<br>    const rows = await this.prisma.todo.findMany();<br>    return rows.map(r =&gt; {<br>      const t = new Todo(r.id, Title.create(r.title));<br>      if (r.isDone) t.complete();<br>      return t;<br>    });<br>  }<br>}</pre>\n<h3>3.4. Interface HTTP</h3>\n<pre>// src/tasks/interface/http/task.controller.ts<br><br>import {<br>  Controller, Get, Post, Patch,<br>  Body, Param, BadRequestException, NotFoundException,<br>} from '@nestjs/common';<br>import { TaskService } from '../../application/task.service';<br><br>@Controller('todos')<br>export class TaskController {<br>  constructor(private readonly service: TaskService) {}<br>  @Post()<br>  async create(@Body('title') title: string) {<br>    try {<br>      return await this.service.createTodo(title);<br>    } catch (e) {<br>      throw new BadRequestException(e.message);<br>    }<br>  }<br>  @Get()<br>  list() {<br>    return this.service.listTodos();<br>  }<br>  @Patch(':id/complete')<br>  async complete(@Param('id') id: string) {<br>    try {<br>      return await this.service.completeTodo(id);<br>    } catch (e) {<br>      if (e.message.includes('not found')) {<br>        throw new NotFoundException(e.message);<br>      }<br>      throw new BadRequestException(e.message);<br>    }<br>  }<br>}</pre>\n<h3>3.5. Le module\u00a0Tasks</h3>\n<blockquote>Seul le module Tasks doit avoir connaissance de toutes les d\u00e9pendences concernant le <strong>bounded</strong> <strong>context</strong>\u00a0<strong>Task</strong>\n</blockquote>\n<pre>// src/tasks/tasks.module.ts<br><br>import { Module } from '@nestjs/common';<br>import { TaskController } from './interface/http/task.controlleur';<br>import { TaskService } from './application/task.service';<br>import { PrismaTodoRepository } from './infrastructure/prisma-todo.repository';<br>import { TodoRepository } from './domain/repositories/todo.repository';<br><br>@Module({<br>  controllers: [TaskController],<br>  providers: [<br>    TaskService,<br>    { provide: TodoRepository, useClass: PrismaTodoRepository },<br>  ],<br>  exports: [TodoRepository],<br>})<br>export class TasksModule {}</pre>\n<h3>3.6. Le module\u00a0App</h3>\n<blockquote>Ne pas oublier d\u2019importer le module tasks dans app.module.ts</blockquote>\n<pre>// src/app.module.ts<br>import { Module } from '@nestjs/common';<br>import { PrismaModule } from './prisma/prisma.module';<br>import { TasksModule } from './tasks/tasks.module';<br><br>@Module({<br>  imports: [<br>    ConfigModule.forRoot({ isGlobal: true }),<br>    PrismaModule,<br>    TasksModule                                  <br>  ],<br>})<br>export class AppModule {}</pre>\n<h3>4. Et pour\u00a0finir\u2026</h3>\n<h4>Pour rappel\u2026</h4>\n<ol>\n<li>Value Object</li>\n<li>Entity</li>\n<li>Repository (abstract)</li>\n<li>Service applicatif</li>\n<li>Adapter infrastructure</li>\n<li>Controller</li>\n<li>Module /\u00a0DI</li>\n</ol>\n<p>Toujours du <strong>m\u00e9tier vers la technique</strong>, pour un code qui parle le langage utilisateur avant de parler\u00a0SQL.</p>\n<p>Tu as maintenant un projet ToDo avec Nest cod\u00e9 en respectant le principe du\u00a0DDD.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gJ_eZTnNFYNbl2Sf\"><figcaption>Photo by <a href=\"https://unsplash.com/@patrickperkins?utm_source=medium&amp;utm_medium=referral\">Patrick Perkins</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ab5364e5ee2f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8lRIOVYtFKHBhK7yefdSPg.png\"></figure><h3>Introduction</h3>\n<p>En 2003, <strong>Eric Evans</strong> publie le livre devenu culte\u00a0: <em>\u201c</em><a href=\"https://www.amazon.fr/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2BCZET4SXTWDI&amp;dib=eyJ2IjoiMSJ9.ugzVjZa0uaqt94P8SyDAe1y87wNc6e-cIGuzyKDzMwyRBJai46dM_qIextbKIpTH.-8ezXIbKK1328abpxpQf9FvTimmWh7ju12KOammT7Zc&amp;dib_tag=se&amp;keywords=Domain-Driven+Design+-+Tackling+Complexity+in+the+Heart+of+Software&amp;qid=1747216122&amp;sprefix=domain-driven+design+-+tackling+complexity+in+the+heart+of+software%2Caps%2C284&amp;sr=8-1&amp;ufe=app_do%3Aamzn1.fos.bb6ea7e0-0ef7-4fc8-9adc-4bf1477881dd\"><em>Domain-Driven Design\u200a\u2014\u200aTackling Complexity in the Heart of Software</em></a><em>\u201d</em>. \u00c0 l\u2019\u00e9poque, les projets Java EE gonflent comme des souffl\u00e9s \u00e0 la puissance de mille <em>XML</em>\u00a0; les \u00e9quipes croulent sous les <strong>\u201cBig Ball of Mud\u201d</strong> (ces blobs de classes an\u00e9mone o\u00f9 la logique m\u00e9tier et la persistance se font des c\u00e2lins). Evans propose alors une id\u00e9e simple mais r\u00e9volutionnaire\u00a0: <strong>mettre le m\u00e9tier au centre</strong> et laisser la technique s\u2019organiser autour, plut\u00f4t que l\u2019inverse.</p>\n<p>Le <strong>DDD</strong> na\u00eet donc d\u2019un constat\u00a0: la vraie complexit\u00e9 n\u2019est pas dans les frameworks, mais dans la t\u00eate des clients (\u201cComment calcula-t-on exactement une remise fid\u00e9lit\u00e9\u00a0?\u201d). Pour \u00e9viter que ces r\u00e8gles ne se dissolvent entre le front et la base de donn\u00e9es, Evans formalise\u00a0:</p>\n<ul>\n<li>Un <strong>langage ubiquitaire</strong> partag\u00e9 par devs et experts m\u00e9tier\u00a0;</li>\n<li>Des <strong>entities</strong>, <strong>value objects</strong> et <strong>aggregates</strong> pour encapsuler les invariants\u00a0;</li>\n<li>Des <strong>repositories</strong> et <strong>services</strong> pour que la base, elle, reste au second plan\u00a0;</li>\n<li>Des <strong>bounded contexts</strong> afin que \u201ccatalogue\u201d chez l\u2019\u00e9quipe A ne se transforme pas en \u201cbooking\u201d chez l\u2019\u00e9quipe\u00a0B.</li>\n</ul>\n<p>Vingt ans plus tard, TypeScript a remplac\u00e9 le <em>XML</em> (ouf), mais la tentation de coller trois any dans un contr\u00f4leur REST plane toujours. C\u2019est l\u00e0 que <strong>NestJS</strong> brille\u00a0: ce framework apporte l\u2019injection de d\u00e9pendances, les d\u00e9corateurs et la modularit\u00e9 qu\u2019il faut pour <strong>impl\u00e9menter le DDD sans transpirer</strong>. Dans ce guide (m\u00eame pas long, promis), on va marier les deux\u00a0: NestJS pour la plomberie, DDD pour le\u00a0cerveau.</p>\n<h3>Ressources</h3>\n<ul>\n<li>D\u00e9pot Git \u2192\u00a0<a href=\"https://github.com/Rbourree/NEST-DDD\">NEST-DDD</a>\n</li>\n<li>Livre sur le DDD \u2192 <a href=\"https://www.amazon.fr/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?__mk_fr_FR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=2BCZET4SXTWDI&amp;dib=eyJ2IjoiMSJ9.ugzVjZa0uaqt94P8SyDAe1y87wNc6e-cIGuzyKDzMwyRBJai46dM_qIextbKIpTH.-8ezXIbKK1328abpxpQf9FvTimmWh7ju12KOammT7Zc&amp;dib_tag=se&amp;keywords=Domain-Driven+Design+-+Tackling+Complexity+in+the+Heart+of+Software&amp;qid=1747216122&amp;sprefix=domain-driven+design+-+tackling+complexity+in+the+heart+of+software%2Caps%2C284&amp;sr=8-1&amp;ufe=app_do%3Aamzn1.fos.bb6ea7e0-0ef7-4fc8-9adc-4bf1477881dd\">Lien\u00a0Amazon</a>\n</li>\n</ul>\n<h3>1. Le DDD qu\u2019est ce que c\u2019est\u00a0?</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lED5IerLislIF-vU\"><figcaption>Photo by <a href=\"https://unsplash.com/@disruptxn?utm_source=medium&amp;utm_medium=referral\">Desola Lanre-Ologun</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Imagine une application comme une ville\u00a0:</p>\n<ul>\n<li>Les <strong>frameworks</strong> sont les routes et les\u00a0\u00e9gouts.</li>\n<li>La <strong>base de donn\u00e9es</strong> est l\u2019entrep\u00f4t municipal.</li>\n<li>Les <strong>utilisateurs</strong> sont les habitants avec leurs vrais\u00a0besoins.</li>\n</ul>\n<p>En 2003, Eric Evans publie <em>Domain-Driven Design</em> et dit, en substance\u00a0: \u00ab\u00a0Arr\u00eatons de b\u00e2tir des autoroutes avant de savoir o\u00f9 sont les maisons\u00a0! Pla\u00e7ons d\u2019abord le <strong>domaine</strong> c\u2019est-\u00e0-dire la logique m\u00e9tier au centre, puis tirons les c\u00e2bles autour.\u00a0\u00bb</p>\n<h4>1.1 Les ingr\u00e9dients de\u00a0base</h4>\n<a href=\"https://medium.com/media/d12168df9f6334b7f323248d9d285e07/href\">https://medium.com/media/d12168df9f6334b7f323248d9d285e07/href</a><h4>1.2 Pourquoi s\u2019emb\u00eater\u00a0?</h4>\n<ol>\n<li>\n<strong>Lisibilit\u00e9</strong>\u00a0: on lit une r\u00e8gle m\u00e9tier dans Order.completePayment() au lieu de la traquer dans cent contr\u00f4leurs.</li>\n<li>\n<strong>\u00c9volutivit\u00e9</strong>\u00a0: nouvelles lois de la ville\u00a0? On modifie l\u2019urbanisme local, pas toute l\u2019infrastructure.</li>\n<li>\n<strong>Communication</strong>\u00a0: d\u00e9veloppeur et expert m\u00e9tier parlent la m\u00eame langue, pas \u201cDTO\u201d, \u201cDAO\u201d, \u201cfooBarServiceImpl42\u201d.</li>\n<li>\n<strong>Testabilit\u00e9</strong>\u00a0: le domaine pur se teste sans base ni\u00a0r\u00e9seau.</li>\n</ol>\n<h4>1.3 Ce que DDD n\u2019est\u00a0pas</h4>\n<ul>\n<li>\u274c Un framework ou une biblioth\u00e8que magique.</li>\n<li>\u274c R\u00e9serv\u00e9 aux m\u00e9ga-monolithes\u00a0; un micro-service complexe en profite\u00a0aussi.</li>\n<li>\u274c Synonyme obligatoire de CQRS, Event Sourcing ou Sagas\u00a0: ce sont des <strong>options</strong> pour certains besoins, pas la base du\u00a0DDD.</li>\n</ul>\n<h4>1.4 Quand l\u2019adopter\u00a0?</h4>\n<ul>\n<li>R\u00e8gles m\u00e9tier simples, CRUD pur \u2192 \ud83d\udfe1 Pas indispensable</li>\n<li>Domaine dense, notions ambigu\u00ebs (\u201ccommande\u201d, \u201cbooking\u201d\u2026) \u2192 \ud83d\udfe2Pertinent</li>\n<li>\u00c9quipe + experts m\u00e9tier disponibles pour affiner le langage \u2192 \ud83d\udfe2\u00a0Vital</li>\n<li>Projet PoC de 2 semaines \u2192 \ud83d\udd34\u00a0Overkill</li>\n</ul>\n<h4>1.5 Un mini-exemple TypeScript</h4>\n<pre>// Value Object<br>export class Amount {<br>  private constructor(private readonly cents: number) {}<br>  static euros(value: number) {<br>    if (value &lt; 0) throw new Error('Montant n\u00e9gatif interdit');<br>    return new Amount(Math.round(value * 100));<br>  }<br>  add(other: Amount) { return new Amount(this.cents + other.cents); }<br>}</pre>\n<pre>// Entity<br>export class Order {<br>  private paid = false;<br>  constructor(readonly id: string, private total: Amount) {}<br>  pay(amount: Amount) {<br>    if (this.paid) throw new Error('D\u00e9j\u00e0 pay\u00e9e');<br>    if (amount !== this.total) throw new Error('Montant incorrect');<br>    this.paid = true;<br>  }<br>}</pre>\n<p>Sans ORM, sans contr\u00f4leur\u00a0: juste la <strong>r\u00e8gle m\u00e9tier</strong> claire comme de l\u2019eau de\u00a0source.</p>\n<h4>TL;DR</h4>\n<p>Le DDD, c\u2019est <strong>construire la ville autour de ses habitants</strong>\u00a0: on part du domaine (ce qui a r\u00e9ellement de la valeur pour l\u2019utilisateur) et on laisse les d\u00e9tails techniques s\u2019aligner. R\u00e9sultat\u00a0: un code qui parle humain, r\u00e9siste mieux au temps et \u00e9vite de transformer chaque livraison en safari\u00a0bug.</p>\n<p>Alors, pr\u00eat \u00e0 chausser votre casque d\u2019urbaniste logiciel\u00a0?\u00a0\ud83d\udee0\ufe0f</p>\n<h3>2. Cr\u00e9ation de notre projet Nest de\u00a0base</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K9DtXc79NVN3d7Q6\"><figcaption>Photo by <a href=\"https://unsplash.com/@danist07?utm_source=medium&amp;utm_medium=referral\">Danist Soh</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p><em>(o\u00f9 l\u2019on fait na\u00eetre le squelette, range les bo\u00eetes et colle les \u00e9tiquettes avant de laisser la logique m\u00e9tier prendre le\u00a0pouvoir)</em></p>\n<h4>2.1. D\u00e9marrage express</h4>\n<pre># installe (ou met \u00e0 jour) le CLI Nest<br>npm i -g @nestjs/cli<br><br># g\u00e9n\u00e8re le projet de base<br>nest new todo-ddd<br>cd todo-ddd</pre>\n<p>Choisis <strong>npm</strong> ou <strong>pnpm</strong>\u00a0; si tu s\u00e9lectionnes Yarn, sache que le karma des d\u00e9pendances transitoires vient de baisser de 3\u00a0points.</p>\n<p>On va \u00e9galement run un postgres avec docker-compose. Cr\u00e9e donc un fichier docker-compose.yml \u00e0 la racine de ton projet avec\u00a0dedans:</p>\n<pre>version: \"3\"<br>services:<br>  db:<br>    image: postgres<br>    restart: always<br>    ports:<br>      - \"5432:5432\"<br>    environment:<br>      POSTGRES_PASSWORD: mypassword</pre>\n<p>On lance le container postgres</p>\n<pre>docker-compose up -d</pre>\n<h4>2.2. Branchons Prisma d\u00e8s le\u00a0d\u00e9part</h4>\n<pre>npm i prisma @prisma/client<br>npx prisma init         # cr\u00e9e prisma/schema.prisma + .env</pre>\n<p>Dans prisma/schema.prisma, on ajoute la table la plus sexy du monde\u00a0:</p>\n<pre>model Todo {<br>  id        String   @id @default(uuid())<br>  title     String<br>  isDone    Boolean  @default(false)<br>  createdAt DateTime @default(now())<br>}</pre>\n<p>Dans le fichier\u00a0.env on edite le path \u00e0 notre\u00a0BDD</p>\n<pre>DATABASE_URL=\"postgresql://postgres:mypassword@localhost:5432/mydb?schema=public\"</pre>\n<p>Puis\u00a0:</p>\n<pre>npx prisma migrate dev --name init<br>npx prisma generate</pre>\n<blockquote>Pourquoi si t\u00f4t\u00a0? Parce qu\u2019on \u00e9vite ainsi le syndrome \u201cd\u00e9pendances Schr\u00f6dinger\u201d\u00a0: on installe Prisma <strong>avant</strong> d\u2019avoir trente fichiers qui l\u2019appellent en\u00a0douce.</blockquote>\n<h4>2.3. Arborescence DDD de notre projet\u00a0Nest</h4>\n<pre>src/<br>\u251c\u2500 app.module.ts<br>\u251c\u2500 prisma/                  &lt;-- client &amp; module global<br>\u2502   \u251c\u2500 prisma.module.ts<br>\u2502   \u2514\u2500 prisma.service.ts<br>\u2514\u2500 tasks/<br>    \u251c\u2500 domain/             &lt;-- 100 % TypeScript pur (Pas de framework)<br>    \u2502   \u251c\u2500 entities/<br>    \u2502   \u2502   \u2514\u2500 todo.entity.ts<br>    \u2502   \u251c\u2500 value-objects/<br>    \u2502   \u2502   \u2514\u2500 title.vo.ts<br>    \u2502   \u2514\u2500 repositories/<br>    \u2502       \u2514\u2500 todo.repository.ts   (abstract class)<br>    \u251c\u2500 application/        &lt;-- services<br>    \u2502   \u2514\u2500 task.service.ts<br>    \u251c\u2500 infrastructure/     &lt;-- adapters I/O<br>    \u2502   \u2514\u2500 prisma-todo.repository.ts<br>    \u251c\u2500 interface/<br>    \u2502    \u2514\u2500 http/<br>    \u2502      \u2514\u2500 task.controller.ts<br>    \u2514\u2500 tasks.module.ts</pre>\n<blockquote>R\u00e8gle d\u2019or\u00a0: <strong>domain ne conna\u00eet personne</strong>, tout le monde conna\u00eet domain. Comme au lyc\u00e9e, mais sans la\u00a0cloche.</blockquote>\n<pre>// src/prisma/prisma.module.ts<br>import { Global, Module } from '@nestjs/common';<br>import { PrismaService } from './prisma.service';<br><br>@Global()<br>@Module({<br>  providers: [PrismaService],<br>  exports:   [PrismaService],<br>})<br>export class PrismaModule {}</pre>\n<pre>// src/prisma/prisma.service.ts<br>import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';<br>import { PrismaClient } from '@prisma/client';<br><br>@Injectable()<br>export class PrismaService<br>  extends PrismaClient<br>  implements OnModuleInit, OnModuleDestroy<br>{<br>  // Tu peux ajuster les niveaux de logs selon l\u2019environnement<br>  constructor() {<br>    super({<br>      log: ['warn', 'error'], // ou ['query', 'info', 'warn', 'error'] en dev<br>    });<br>  }<br><br>  async onModuleInit() {<br>    // Ouvre la connexion d\u00e8s que Nest d\u00e9marre<br>    await this.$connect();<br>  }<br><br>  async onModuleDestroy() {<br>    // Ferme proprement la connexion quand Nest s\u2019arr\u00eate<br>    await this.$disconnect();<br>  }<br><br>  /** Utilitaire pratique pour ex\u00e9cuter une transaction Prisma<br>   *   await prisma.$transaction(fn);<br>   */<br>}</pre>\n<pre>// src/app.module.ts<br>import { Module } from '@nestjs/common';<br>import { PrismaModule } from './prisma/prisma.module';  // global<br><br>@Module({<br>  imports: [<br>    // Charge les variables .env dans process.env<br>    ConfigModule.forRoot({ isGlobal: true }),           // \u2190 enl\u00e8ve-le si tu ne l\u2019utilises pas<br>    PrismaModule,                                       // rend PrismaService injectable<br>  ],<br>  // Pas de controllers ni providers ici : chaque module g\u00e8re les siens<br>})<br>export class AppModule {}</pre>\n<blockquote>Nous voil\u00e0 avec projet Nest de base et son arborescence en DDD pr\u00eat \u00e0 l\u2019emplois</blockquote>\n<h3>3. En route pour le vrai, le pur,\u00a0DDD</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*pmMTmawfdjsv2h0s\"><figcaption>Photo by <a href=\"https://unsplash.com/@jon_chng?utm_source=medium&amp;utm_medium=referral\">Jonathan Chng</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><blockquote>Tu as d\u00e9j\u00e0 ton squelette Nest + Prisma et l\u2019arborescence<br> domain / application / infrastructure / interface.<br> On remplit tout \u00e7a <strong>dans l\u2019ordre m\u00e9tier d\u2019abord, technique ensuite</strong>.</blockquote>\n<h4>3.1. Le domaine avant tout (TypeScript pur)</h4>\n<p><strong>3.1.1 Le value-object</strong></p>\n<pre>// src/tasks/domain/value-objects/title.vo.ts<br>export class Title {<br>  private constructor(private readonly value: string) {}<br><br>  static create(raw: string): Title {<br>    const t = raw?.trim();<br>    if (!t || t.length &lt; 3) {<br>      throw new Error('Title too short');<br>    }<br>    return new Title(t);<br>  }<br>  toString() {<br>    return this.value;<br>  }<br>}</pre>\n<p><strong>3.1.2 L\u2019entity</strong></p>\n<pre>// src/tasks/domain/entities/todo.entity.ts<br>import { Title } from '../value-objects/title.vo';<br><br>export class Todo {<br>  private done = false;<br>  constructor(readonly id: string, private _title: Title) {}<br>  complete() {<br>    if (this.done) throw new Error('Already done');<br>    this.done = true;<br>  }<br>  changeTitle(newTitle: Title) {<br>    this._title = newTitle;<br>  }<br>  get title()  { return this._title.toString(); }<br>  get isDone() { return this.done; }<br>}</pre>\n<p><strong>3.1.3 Le repository</strong></p>\n<pre>// src/tasks/domain/repositories/todo.repository.ts<br>export abstract class TodoRepository {<br>  abstract save(todo: Todo): Promise&lt;void&gt;;<br>  abstract findById(id: string): Promise&lt;Todo | null&gt;;<br>  abstract findAll(): Promise&lt;Todo[]&gt;;<br>}</pre>\n<h3>3.2. Couche application</h3>\n<pre>// src/tasks/application/task.service.ts<br>import { Injectable, Inject } from '@nestjs/common';<br>import { randomUUID } from 'crypto';<br>import { Todo } from '../domain/entities/todo.entity';<br>import { Title } from '../domain/value-objects/title.vo';<br>import { TodoRepository } from '../domain/repositories/todo.repository';<br><br>@Injectable()<br>export class TaskService {<br>  constructor(<br>    @Inject(TodoRepository) private readonly repo: TodoRepository,<br>  ) {}<br>  async createTodo(rawTitle: string) {<br>    const todo = new Todo(randomUUID(), Title.create(rawTitle));<br>    await this.repo.save(todo);<br>    return todo;<br>  }<br>  listTodos() {<br>    return this.repo.findAll();<br>  }<br>  async completeTodo(id: string) {<br>    const todo = await this.repo.findById(id);<br>    if (!todo) throw new Error('Todo not found');<br>    todo.complete();<br>    await this.repo.save(todo);<br>    return todo;<br>  }<br>}</pre>\n<h3>3.3. Infrastructure (adaptateur Prisma)</h3>\n<pre>// src/tasks/infrastructure/prisma-todo.repository.ts<br><br>import { Injectable } from '@nestjs/common';<br>import { PrismaService } from '../../prisma/prisma.service';<br>import { TodoRepository } from '../domain/repositories/todo.repository';<br>import { Todo } from '../domain/entities/todo.entity';<br>import { Title } from '../domain/value-objects/title.vo';<br><br>@Injectable()<br>export class PrismaTodoRepository implements TodoRepository {<br>  constructor(private readonly prisma: PrismaService) {}<br>  async save(todo: Todo) {<br>    await this.prisma.todo.upsert({<br>      where:  { id: todo.id },<br>      update: { title: todo.title, isDone: todo.isDone },<br>      create: { id: todo.id, title: todo.title, isDone: todo.isDone },<br>    });<br>  }<br>  async findById(id: string) {<br>    const row = await this.prisma.todo.findUnique({ where: { id } });<br>    if (!row) return null;<br>    const t = new Todo(row.id, Title.create(row.title));<br>    if (row.isDone) t.complete();<br>    return t;<br>  }<br>  async findAll() {<br>    const rows = await this.prisma.todo.findMany();<br>    return rows.map(r =&gt; {<br>      const t = new Todo(r.id, Title.create(r.title));<br>      if (r.isDone) t.complete();<br>      return t;<br>    });<br>  }<br>}</pre>\n<h3>3.4. Interface HTTP</h3>\n<pre>// src/tasks/interface/http/task.controller.ts<br><br>import {<br>  Controller, Get, Post, Patch,<br>  Body, Param, BadRequestException, NotFoundException,<br>} from '@nestjs/common';<br>import { TaskService } from '../../application/task.service';<br><br>@Controller('todos')<br>export class TaskController {<br>  constructor(private readonly service: TaskService) {}<br>  @Post()<br>  async create(@Body('title') title: string) {<br>    try {<br>      return await this.service.createTodo(title);<br>    } catch (e) {<br>      throw new BadRequestException(e.message);<br>    }<br>  }<br>  @Get()<br>  list() {<br>    return this.service.listTodos();<br>  }<br>  @Patch(':id/complete')<br>  async complete(@Param('id') id: string) {<br>    try {<br>      return await this.service.completeTodo(id);<br>    } catch (e) {<br>      if (e.message.includes('not found')) {<br>        throw new NotFoundException(e.message);<br>      }<br>      throw new BadRequestException(e.message);<br>    }<br>  }<br>}</pre>\n<h3>3.5. Le module\u00a0Tasks</h3>\n<blockquote>Seul le module Tasks doit avoir connaissance de toutes les d\u00e9pendences concernant le <strong>bounded</strong> <strong>context</strong>\u00a0<strong>Task</strong>\n</blockquote>\n<pre>// src/tasks/tasks.module.ts<br><br>import { Module } from '@nestjs/common';<br>import { TaskController } from './interface/http/task.controlleur';<br>import { TaskService } from './application/task.service';<br>import { PrismaTodoRepository } from './infrastructure/prisma-todo.repository';<br>import { TodoRepository } from './domain/repositories/todo.repository';<br><br>@Module({<br>  controllers: [TaskController],<br>  providers: [<br>    TaskService,<br>    { provide: TodoRepository, useClass: PrismaTodoRepository },<br>  ],<br>  exports: [TodoRepository],<br>})<br>export class TasksModule {}</pre>\n<h3>3.6. Le module\u00a0App</h3>\n<blockquote>Ne pas oublier d\u2019importer le module tasks dans app.module.ts</blockquote>\n<pre>// src/app.module.ts<br>import { Module } from '@nestjs/common';<br>import { PrismaModule } from './prisma/prisma.module';<br>import { TasksModule } from './tasks/tasks.module';<br><br>@Module({<br>  imports: [<br>    ConfigModule.forRoot({ isGlobal: true }),<br>    PrismaModule,<br>    TasksModule                                  <br>  ],<br>})<br>export class AppModule {}</pre>\n<h3>4. Et pour\u00a0finir\u2026</h3>\n<h4>Pour rappel\u2026</h4>\n<ol>\n<li>Value Object</li>\n<li>Entity</li>\n<li>Repository (abstract)</li>\n<li>Service applicatif</li>\n<li>Adapter infrastructure</li>\n<li>Controller</li>\n<li>Module /\u00a0DI</li>\n</ol>\n<p>Toujours du <strong>m\u00e9tier vers la technique</strong>, pour un code qui parle le langage utilisateur avant de parler\u00a0SQL.</p>\n<p>Tu as maintenant un projet ToDo avec Nest cod\u00e9 en respectant le principe du\u00a0DDD.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gJ_eZTnNFYNbl2Sf\"><figcaption>Photo by <a href=\"https://unsplash.com/@patrickperkins?utm_source=medium&amp;utm_medium=referral\">Patrick Perkins</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ab5364e5ee2f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["nestjs","ddd","typescript","craftmanship","domain-driven-design"]}]}